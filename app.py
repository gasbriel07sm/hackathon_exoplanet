# app.py
import streamlit as st
import pandas as pd
import numpy as np
import os
import lightkurve as lk
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from model import ExoplanetPredictor

# --- 1. Configura√ß√µes Iniciais e Carregamento do Modelo ---
st.set_page_config(page_title="Exoplanet AI Explorer", layout="wide", initial_sidebar_state="expanded")

@st.cache_resource
def load_predictor():
    """Carrega o modelo de IA e armazena em cache para performance."""
    return ExoplanetPredictor(artifacts_path='artifacts/')

predictor = load_predictor()

# --- 2. Fun√ß√µes de Visualiza√ß√£o ---

@st.cache_data
def plot_light_curve(target_id, period, mission='Kepler'):
    """Busca, processa e plota uma curva de luz dobrada."""
    try:
        search = lk.search_lightcurve(target_id, mission=mission, author=('Kepler', 'K2', 'TESS'))
        lc = search.download(download_dir=".lightkurve-cache").flatten().remove_outliers()
        folded_lc = lc.fold(period=period)
        
        fig, ax = plt.subplots(figsize=(10, 6))
        folded_lc.plot(ax=ax, alpha=0.1, color='royalblue', label="Dados Brutos")
        folded_lc.bin(time_bin_size=0.01).plot(ax=ax, color='red', lw=3, label="Sinal M√©dio do Tr√¢nsito")
        ax.set_title(f"Curva de Luz Dobrada para {target_id}", fontsize=16)
        ax.set_xlabel("Fase (relativa ao tr√¢nsito)", fontsize=12)
        ax.set_ylabel("Brilho Normalizado", fontsize=12)
        ax.legend()
        ax.grid(True, linestyle='--', alpha=0.6)
        return fig
    except Exception as e:
        return f"N√£o foi poss√≠vel gerar o gr√°fico da curva de luz: {e}"

def create_orbit_animation(st_rad, pl_rad, pl_orbper):
    """Cria uma anima√ß√£o 2D simplificada do tr√¢nsito."""
    try:
        fig, ax = plt.subplots(figsize=(6, 6))
        
        star_radius = st_rad if pd.notna(st_rad) and st_rad > 0 else 1.0
        planet_radius = (pl_rad / 109) if pd.notna(pl_rad) and pl_rad > 0 else 0.1
        orbit_radius = star_radius * 10
        
        star = plt.Circle((0, 0), star_radius, color='gold', zorder=10)
        ax.add_patch(star)
        planet = plt.Circle((0, 0), planet_radius * 20, color='darkblue', zorder=11) # Aumenta para visibilidade
        ax.add_patch(planet)

        ax.set_aspect('equal')
        ax.set_xlim(-orbit_radius * 1.2, orbit_radius * 1.2)
        ax.set_ylim(-orbit_radius * 1.2, orbit_radius * 1.2)
        ax.axis('off')

        def animate(i):
            angle = np.radians(i * 3.6)
            planet_x = orbit_radius * np.cos(angle)
            planet_y = orbit_radius * np.sin(angle) * 0.2 # Simula inclina√ß√£o
            planet.set_center((planet_x, planet_y))
            # O planeta fica "atr√°s" da estrela em metade da √≥rbita
            planet.set_zorder(5 if planet_x < 0 else 11)
            return planet,

        ani = animation.FuncAnimation(fig, animate, frames=100, interval=50, blit=True)
        return ani
    except Exception as e:
        return f"Erro ao criar anima√ß√£o: {e}"

# --- 3. Estrutura da Barra Lateral (Sidebar) ---
with st.sidebar:
    st.title("üõ∞Ô∏è Exoplanet AI Explorer")
    st.markdown("Uma plataforma para detectar e visualizar exoplanetas com Intelig√™ncia Artificial.")
    
    page = st.radio(
        "Navega√ß√£o",
        ["P√°gina Inicial", "An√°lise para Leigos", "An√°lise Profissional", "Visualizador Interativo", "Como a IA Funciona"]
    )
    st.divider()
    st.info("Projeto constru√≠do para o NASA Space Apps Challenge.")
    st.caption("Desenvolvido com Python, Streamlit e XGBoost.")

# --- 4. Renderiza√ß√£o das P√°ginas ---

if page == "P√°gina Inicial":
    st.title("Bem-vindo ao Explorador de Exoplanetas com IA!")
    st.markdown("""
        Esta plataforma interativa utiliza Intelig√™ncia Artificial para mergulhar no fascinante mundo da descoberta de exoplanetas. 
        Navegue pelas se√ß√µes na barra lateral para aprender, analisar e visualizar.
    """)
    
    st.header("O que s√£o Exoplanetas?")
    st.markdown("Exoplanetas s√£o planetas que orbitam uma estrela diferente do nosso Sol. A busca por esses mundos distantes nos ajuda a entender nosso lugar no cosmos e a procurar por sinais de vida.")

    st.header("Como os Detectamos? O M√©todo de Tr√¢nsito")
    col1, col2 = st.columns([1, 2])
    with col1:
        st.image("https://i.imgur.com/w9N09T4.png", use_column_width=True)
    with col2:
        st.markdown("""
            Quando um planeta passa na frente de sua estrela (um evento chamado **tr√¢nsito**), ele bloqueia uma pequena parte da luz. Isso causa uma queda min√∫scula e peri√≥dica no brilho da estrela.
            
            - **Gr√°fico (a):** Uma estrela sem um planeta em tr√¢nsito tem um brilho constante.
            - **Gr√°fico (b):** Uma estrela com um planeta em tr√¢nsito mostra quedas de brilho regulares, criando uma **curva de luz** caracter√≠stica.
            
            Nossa IA √© treinada para reconhecer a "impress√£o digital" de um tr√¢nsito real nesses dados.
        """)

    st.header("Confirmado vs. Candidato vs. Falso Positivo")
    st.markdown("""
    - **Candidato:** Um sinal que **parece** ser um planeta. Precisa de mais an√°lise.
    - **Confirmado:** Um candidato que foi verificado por m√∫ltiplos m√©todos e √©, com alta certeza, um planeta real.
    - **Falso Positivo:** Um sinal que parece um tr√¢nsito, mas √© causado por outra coisa (ex: duas estrelas se eclipsando, ru√≠do do telesc√≥pio). **Filtrar falsos positivos √© um dos maiores desafios**, e √© onde a IA brilha.
    """)
    st.info("Este projeto usa dados do **NEOSSat** (Canad√°) e do **Telesc√≥pio Espacial James Webb (JWST)**, destacando a colabora√ß√£o internacional na explora√ß√£o espacial.")


elif page == "An√°lise para Leigos":
    st.title("üîç An√°lise Simplificada: A IA em A√ß√£o")
    st.markdown("Clique no bot√£o abaixo! N√≥s pegaremos um exemplo aleat√≥rio de um objeto celeste e pediremos para a nossa IA classific√°-lo em tempo real.")

    if st.button("Analisar um Exemplo Aleat√≥rio", type="primary", use_container_width=True):
        try:
            example_df = pd.read_csv('data/kepler.csv', comment='#').sample(1)
            st.info("Dados do exemplo aleat√≥rio selecionado:")
            st.dataframe(example_df)
            
            with st.spinner("A IA est√° analisando o objeto..."):
                result = predictor.predict(example_df)
                if result and not result['error']:
                    prediction = result['prediction']
                    st.header("Resultado da An√°lise:")
                    if prediction == "Confirmed":
                        st.success(f"ü™ê **PLANETA CONFIRMADO** (Confian√ßa: {result['confidence']['Confirmed']:.1%})")
                    elif prediction == "Candidate":
                        st.info(f"üî≠ **CANDIDATO PROMISSOR** (Confian√ßa: {result['confidence']['Candidate']:.1%})")
                    else:
                        st.warning(f"‚òÑÔ∏è **FALSO POSITIVO** (Confian√ßa: {result['confidence']['False Positive']:.1%})")
        except Exception as e:
            st.error(f"Ocorreu um erro ao gerar o exemplo: {e}")

elif page == "An√°lise Profissional":
    st.title("üî¨ An√°lise Profissional: Classifique Seus Dados")
    
    tab1, tab2 = st.tabs(["Upload de Arquivo CSV", "Entrada Manual"])

    with tab1:
        st.subheader("Upload de Arquivo (Uma Linha por Vez)")
        uploaded_file = st.file_uploader("Selecione um arquivo CSV:", type="csv")
        if uploaded_file:
            input_df = pd.read_csv(uploaded_file)
            row_to_predict = st.selectbox("Selecione a linha do arquivo para analisar:", input_df.index)
            selected_row = input_df.iloc[[row_to_predict]]
            
            st.write("Dados selecionados para an√°lise:")
            st.dataframe(selected_row)

            if st.button("Classificar Observa√ß√£o Selecionada", type="primary"):
                with st.spinner("A IA est√° analisando..."):
                    result = predictor.predict(selected_row)
                    if result and not result['error']:
                        st.header("Resultado da An√°lise:")
                        st.metric("Previs√£o Final", result['prediction'])
                        st.write("N√≠veis de Confian√ßa:")
                        st.json({k: f"{v:.2%}" for k, v in result['confidence'].items()})

    with tab2:
        st.subheader("Entrada Manual (Principais Features)")
        with st.form("manual_input_form"):
            top_features = [col for col in predictor.X_columns if 'koi_' in col][:10]
            manual_data = {}
            st.write("Insira os valores para as features mais comuns do Kepler:")
            cols = st.columns(2)
            for i, feature in enumerate(top_features):
                manual_data[feature] = cols[i % 2].number_input(feature, value=0.0, format="%.6f", key=f"manual_{feature}")
            
            submitted = st.form_submit_button("Classificar")
            if submitted:
                input_df_manual = pd.DataFrame([manual_data])
                with st.spinner("A IA est√° analisando..."):
                    result = predictor.predict(input_df_manual)
                    if result and not result['error']:
                        st.header("Resultado da An√°lise:")
                        st.metric("Previs√£o Final", result['prediction'])
                        st.write("N√≠veis de Confian√ßa:")
                        st.json({k: f"{v:.2%}" for k, v in result['confidence'].items()})

elif page == "Visualizador Interativo":
    st.title("üåå Visualizador de Tr√¢nsito e √ìrbita")
    st.markdown("Insira os dados de um objeto para gerar visualiza√ß√µes de sua curva de luz e uma representa√ß√£o de sua √≥rbita.")

    col1, col2 = st.columns(2)
    with col1:
        target_id_input = st.text_input("ID do Alvo (ex: KIC 11904151)", "KIC 11904151")
        period_input = st.number_input("Per√≠odo Orbital (dias)", value=0.837, format="%.6f")
    with col2:
        st_rad_input = st.number_input("Raio da Estrela (Raios Solares)", value=1.0)
        pl_rad_input = st.number_input("Raio do Planeta (Raios Terrestres)", value=1.5)

    if st.button("Gerar Visualiza√ß√µes", type="primary", use_container_width=True):
        viz_col1, viz_col2 = st.columns(2)
        with viz_col1:
            st.subheader("Gr√°fico da Curva de Luz")
            with st.spinner("Buscando dados nos arquivos da NASA..."):
                lc_fig = plot_light_curve(target_id_input, period_input)
                if isinstance(lc_fig, plt.Figure):
                    st.pyplot(lc_fig)
                else:
                    st.warning(str(lc_fig)) # Mostra a mensagem de erro da fun√ß√£o
        # C√ìDIGO COM ANIMA√á√ÉO DESATIVADA

        with viz_col2:
            st.subheader("Anima√ß√£o do Tr√¢nsito (Conceitual)")
            st.warning("A funcionalidade de anima√ß√£o requer a instala√ß√£o do 'ffmpeg' no seu sistema. Como n√£o foi encontrado, esta visualiza√ß√£o foi desativada.")
            # with st.spinner("Gerando anima√ß√£o... (Pode requerer `ffmpeg`)"):
            #     animation_obj = create_orbit_animation(st_rad_input, pl_rad_input, period_input)
            #     if isinstance(animation_obj, animation.FuncAnimation):
            #         st.video(animation_obj.to_html5_video())
            #         plt.close()
            #     else:
            #         st.warning(str(animation_obj))

elif page == "Como a IA Funciona":
    st.title("üß† Como a Nossa IA Funciona")
    st.markdown("""
        Esta IA n√£o √© uma "caixa preta". Ela foi constru√≠da usando um pipeline de Machine Learning claro e robusto. 
        Abaixo, voc√™ pode ver a performance do modelo e quais informa√ß√µes ele considera mais importantes.
    """)
    st.header("Performance do Modelo")
    st.markdown("Estes s√£o os resultados do modelo em um conjunto de teste que ele nunca viu durante o treinamento. A **acur√°cia de 95%+** mostra que ele √© altamente confi√°vel.")
    # Adicione a imagem do seu relat√≥rio de classifica√ß√£